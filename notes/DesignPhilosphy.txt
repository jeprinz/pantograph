Here is my (Jacob's) opinions about design from my experience designing the first version of Pantograph:

-- The answer to the question "what is the right abstraction to use here" is not type-system dependent - the correct solution
   is the same in an untyped language as it is in dependent type theory.
   -- Never bend your design to fit the type system - instead, accept that the code is (partially) untyped if necessary.

   EXAMPLE: just because Hindley-Millner can't type generic trees doesn't mean generic trees aren't the right design



-- Knowledge should be stored in values, not types, so that you can operate on it programmatically.

   EXAMPLE: Suppose you have an ADT for a grammar with `let : ID -> Term -> Term -> Term`. Here, the knowledge that
   let has two Term children is encoded in a type, so that knowledge is inaccessible to the program.
   While this might work fine in simple programs, it will cause code duplication eventually.
