/*  html */

html,
body {
  margin: 0;
  padding: 0;
  font-family: var(--code-font);
}

/* GlobalMessage */

.GlobalMessages {
  display: flex;
  flex-direction: column;
  /* flex-direction: column-reverse; */
  gap: var(--it);
  /* width: calc(100% - 2*var(--it)); */
  /* padding: var(--it); */
}

.GlobalMessage {
  display: flex;
  flex-direction: row;
  /* width: 100%; */
}

.GlobalMessageTag {
  padding: 0 var(--it);
  height: fit-content;
  background-color: black;
  color: white;
  /* font-weight: bold; */
}

.DebugGlobalMessageTag {
  color: var(--debug-color);
}

.ErrorGlobalMessageTag {
  color: var(--error-color);
}

.ErrorGlobalMessageTag+.GlobalMessageContent {
  /* box-shadow: 0 0 0 1px var(--error-color); */
  background-color: rgb(255, 230, 230);
}

.InfoGlobalMessageTag {
  color: var(--info-color);
}

.GlobalMessageContent {
  flex-grow: 1;
  padding: 0 var(--it);
  box-shadow: -1px 0 0 0 black;
  /* width: 100%; */
}

.GlobalMessageRecordKey {
  display: inline-block;
  margin-right: var(--it);
  background-color: rgb(204, 204, 204);
  color: black;
  padding: 0 var(--it);
  font-size: 80%;
  font-weight: bold;
}

/* Expr */

.Expr {
  display: inline;
  white-space: pre;
  cursor: pointer;
  user-select: none;
}

.Punctuation {
  display: inline;
  white-space: pre;
}

.Whitespace {
  display: inline;
  color: rgba(0, 0, 0, 0);
  white-space: pre;
}

.Expr.Hover>.Whitespace,
.Expr.OutsideCursor>.Whitespace,
.Expr.InsideCursor>.Whitespace,
.Expr.OutsideSelect .Whitespace {
  color: gray;
}

.Expr.InsideSelect .Whitespace {
  color: rgba(0, 0, 0, 0);
}

.Expr.Hover {
  box-shadow: -2px 0 0 0 var(--hover-border-color), 2px 0 0 0 var(--hover-border-color);
}

.Expr.OutsideCursor,
.Expr.OutsideCursor.Hover {
  background-color: var(--cursor-background-color);
  box-shadow: -2px 0 0 0 var(--cursor-border-color), 2px 0 0 0 var(--cursor-border-color);
}

.Expr.InsideCursor,
.Expr.InsideCursor.Hover {
  border-radius: calc(0.5 * var(--it));
  background-color: var(--cursor-background-color);
  box-shadow: -2px 0 0 0 var(--cursor-border-color) inset, 2px 0 0 0 var(--cursor-border-color) inset;
}

.Expr.Hover {
  background-color: var(--hover-background-color);
}

.Expr.OutsideSelect {
  background-color: var(--select-background-color);
  box-shadow: -2px 0 0 0 var(--cursor-border-color) inset, 2px 0 0 0 var(--cursor-border-color) inset;
}

.Expr.InsideSelect {
  background-color: white;
  box-shadow: -2px 0 0 0 var(--cursor-border-color) inset, 2px 0 0 0 var(--cursor-border-color) inset;
}

/* Toolbox */

.Toolbox {
  display: inline-block;
  position: relative;
}

.ToolboxInterior {
  position: absolute;
  top: 1.2em;
  background-color: rgb(217, 217, 217);
}

.ToolboxInput {
  padding: var(--it);
  font-size: 16px;
  border: none;
  outline: none;
  border-radius: 0;
  background-color: rgb(217, 217, 217);
  font-family: var(--code-font);
}

.EditRows {}

.EditRow {}

.EditRow.SelectedEditRow {
  background-color: rgb(211, 255, 209);
}

.Edit {
  padding: var(--it);
}

.EditHole {
  display: inline-block;
  box-shadow: 0 0 0 2px var(--cursor-border-color) inset;
  background-color: rgb(225, 225, 225);
  min-width: calc(2*var(--it));
}

.ToolboxExpr {}

.AdjacentEditClasp {
  display: inline-block;
  background-color: rgb(225, 225, 225);
}

/* Preview */

.Preview {
  display: inline;
  background-color: var(--new-background-color);
}

.PreviewLeft {}

.PreviewLeftPaste+.Expr {
  background-color: var(--old-background-color);
}

.PreviewLeftInsert {}

.PreviewLeftPaste {}

.PreviewRight {}

.PreviewRightInsert {}

.PreviewRightPaste {}

.PreviewLeftPaste+.Expr {
  background-color: rgb(255, 165, 165);
}

/* BufferInfo */

.Program {
  padding: var(--it);
  flex-grow: 1;
}

.BufferInfo {
  padding: var(--it);
  flex-grow: 0;
}

.BufferInfoItemInner {
  /* box-shadow: 0 0 8px 2px black; */
  box-shadow: 0 0 0 2px black;
  display: inline-flex;
  flex-direction: row;
  gap: var(--it);
}

.BufferInfoItemTitle {
  display: flex;
  justify-content: center;
  align-content: center;
  flex-direction: column;

  background-color: black;
  color: var(--color2);
  padding: calc(1.5*var(--it)) calc(var(--it));
}

.BufferInfoItemValue {
  display: flex;
  justify-content: center;
  align-content: center;
  flex-direction: column;

  padding: var(--it);
}

/* Sort */

.Sort {
  display: inline;
}

.Sort:hover {
  box-shadow: 0 0 0 4px var(--hover-border-color);
}

.VarSN {
  display: inline;
}

.VarRuleSortNode {
  display: inline;
}

.SortTooth {
  display: inline;
}

.SortChange {
  display: inline;
}

.Change {
  display: inline;
}

.ShiftChange {
  /* background-color: rgb(239, 156, 0); */
  /* padding: 0 calc(0.5*var(--it)); */
  padding: calc(0.5*var(--it)) calc(0.5*var(--it));
}

.ShiftChange.MinusShift {
  background-color: var(--old-background-color);
}

.ShiftChange.PlusShift {
  background-color: var(--new-background-color);
}

.ShiftChangeInner {
  display: inline;
  background-color: white;
  padding: 0 calc(0.5*var(--it));
}


.ReplaceChangeLeft {
  display: inline;
  background-color: var(--old-background-color);
  padding: 0 calc(0.5*var(--it));
}

.ReplaceChangeRight {
  display: inline;
  background-color: var(--new-background-color);
  padding: 0 calc(0.5*var(--it));
}

.InjectChange {}


/* StepExpr */

.StepExprBoundaryContainer {
  display: inline-flex;
  flex-direction: row;
  outline: 1px solid black;
  /* align-items: center; */
  align-items: stretch;
}

.StepExpr {
  display: inline-block;
}


.StepExprBoundaryDirection {
  display: flex;
  justify-content: center;
  align-content: center;
  flex-direction: column;

  padding: 0 calc(0.5*var(--it));
  background-color: black;
  color: white;
}

.StepExprBoundaryChange {
  display: flex;
  justify-content: center;
  align-content: center;
  flex-direction: column;

  background-color: var(--boundary-background-color);
  padding: var(--it);
}

.StepExprBoundary {
  display: flex;
  justify-content: center;
  align-content: center;
  flex-direction: column;

  /* padding: calc(0.5*var(--it)); */
  padding: var(--it);
  border-left: 1px solid var(--boundary-color);
}

.StepExprMarker {
  display: inline-block;
  /* outline: 1px solid var(--cursor-border-color); */
}

/* SortingRule */

.SortingRule {
  display: inline;
}

.SortingRuleParameters {
  display: block;
  padding: 0 var(--it);
  background-color: lightgray;
}

.SortingRuleKids {
  display: inline;
}

.SortingRuleParent {
  display: inline;
}

.RuleSortVar {
  display: inline;
}

.SortVar {
  display: inline;
}

.SortVarLabel {
  display: inline;
}

/* TODO: need this? */
/* .SortVarLabel::before {
  content: '?';
} */

.SortVarUuid {
  display: none;
}

/* TODO: do i want this? */

/* .SortVar:hover>.SortVarUuid {
  display: inline;
}

.SortVar:hover>.SortVarUuid::before {
  content: '#'; 
}
*/


/* Html */

.Hole {
  color: gray;
  padding: 0 calc(0.5*var(--it));
}

.Inline {
  display: inline;
}

.Block {
  margin-bottom: var(--it);
}

.Button {
  display: inline-block;
  padding: 0 calc(0.5*var(--it));
  user-select: none;
  cursor: pointer;

  color: var(--color2);
  box-shadow: 0 0 0 1px var(--color2);
  background-color: black;
}

.Button:hover {
  color: black;
  box-shadow: 0 0 0 1px black;
  background-color: var(--color2);
}

.Bug {
  background-color: var(--error-color);
  color: white;
  display: inline;
  padding: 0 var(--it);
  margin-right: var(--it);
}

.Matrix tr {}

.Matrix td {
  padding: calc(0.5*var(--it));
}

.UuidSplotch {
  display: inline-block;
  font-weight: bold;
  /* text-decoration: underline; */
  /* background-color: black; */
  padding: 0 calc(0.5*var(--it));
  /* margin: 0 calc(0.5*var(--it)); */
  border-radius: var(--it);
  outline-style: solid;
  outline-width: 0;
}

.LinkedUuidSplotch {
  /* box-shadow: 0 0 0 4px black; */
  /* border-left-width: var(--it);
  border-right-width: var(--it);
  border-style: inset; */
  outline-width: 4px;
}

.UuidSplotch {
  transition-property: outline-width;
  transition-duration: 0.2s;
  transition-timing-function: linear;
}

.LinkedUuidSplotch {
  transition-property: outline-width;
  transition-duration: 0.2s;
  transition-timing-function: linear;
}